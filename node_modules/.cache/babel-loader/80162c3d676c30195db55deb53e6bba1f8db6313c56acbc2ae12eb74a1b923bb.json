{"ast":null,"code":"var _jsxFileName = \"C:\\\\ers\\\\src\\\\screen\\\\DistanceOrder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"../css/DistanceOrder.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleHospitals = [{\n  id: 1,\n  name: \"Hospital 1\",\n  distance: \"3.1\",\n  Acongestion: \"2\",\n  Bcongestion: \"2\"\n}, {\n  id: 2,\n  name: \"Hospital 2\",\n  distance: \"2.3\",\n  Acongestion: \"1\",\n  Bcongestion: \"3\"\n}, {\n  id: 3,\n  name: \"Hospital 3\",\n  distance: \"1.7\",\n  Acongestion: \"4\",\n  Bcongestion: \"6\"\n}, {\n  id: 4,\n  name: \"Hospital 4\",\n  distance: \"5.4\",\n  Acongestion: \"3\",\n  Bcongestion: \"4\"\n}, {\n  id: 5,\n  name: \"Hospital 5\",\n  distance: \"4.2\",\n  Acongestion: \"4\",\n  Bcongestion: \"7\"\n}, {\n  id: 6,\n  name: \"Hospital 6\",\n  distance: \"3.2\",\n  Acongestion: \"5\",\n  Bcongestion: \"3\"\n}, {\n  id: 7,\n  name: \"Hospital 7\",\n  distance: \"5.7\",\n  Acongestion: \"6\",\n  Bcongestion: \"2\"\n}, {\n  id: 8,\n  name: \"Hospital 8\",\n  distance: \"2.3\",\n  Acongestion: \"2\",\n  Bcongestion: \"4\"\n}, {\n  id: 9,\n  name: \"Hospital 9\",\n  distance: \"6.7\",\n  Acongestion: \"7\",\n  Bcongestion: \"7\"\n}, {\n  id: 10,\n  name: \"Hospital 10\",\n  distance: \"8.2\",\n  Acongestion: \"8\",\n  Bcongestion: \"3\"\n}, {\n  id: 11,\n  name: \"Hospital 11\",\n  distance: \"9.1\",\n  Acongestion: \"2\",\n  Bcongestion: \"4\"\n}, {\n  id: 12,\n  name: \"Hospital 12\",\n  distance: \"0.5\",\n  Acongestion: \"1\",\n  Bcongestion: \"3\"\n}\n// ... 나머지 병원 데이터\n];\n\n// const DistanceOrder = () => {\n//   const [sortedHospitals, setSortedHospitals] = useState([]);\n//   const [userLocation, setUserLocation] = useState(\"Fetching location...\");\n\n//   useEffect(() => {\n//     // 사용자 위치 가져오기\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         async (position) => {\n//           const latitude = position.coords.latitude;\n//           const longitude = position.coords.longitude;\n//           try {\n//             const response = await fetch(\n//               `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,\n//               {\n//                 headers: {\n//                   Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\", // 'KakaoAK'를 사용하여 API 키를 지정합니다.\n//                   \"Content-Type\":\n//                     \"application/x-www-form-urlencoded;charset=utf-8\", // 이 헤더도 추가합니다.\n//                 },\n//               }\n//             );\n//             const data = await response.json();\n//             console.log(data);\n//             if (data.documents && data.documents.length > 0) {\n//               const address = data.documents[0].address;\n\n//               // const addressComponents = address.address_name.split(\" \");\n//               // const first_address = addressComponents[0];\n//               // const second_address = addressComponents[1];\n//               // DB 연결 및 데이터 전송 로직\n//               // axios\n//               //   .post(\"YOUR_DB_ENDPOINT\", {\n//               //     first_address: first_address,\n//               //     second_address: second_address,\n//               //   })\n//               //   .then((response) => {\n//               //     console.log(response.data); // 성공적으로 데이터를 보냈을 때의 응답을 출력\n//               //   })\n//               //   .catch((error) => {\n//               //     console.log(\"Error sending data to DB: \", error);\n//               //   });\n\n//               setUserLocation(address.address_name);\n//             } else {\n//               setUserLocation(\"Cannot find address for this location\");\n//             }\n//           } catch (error) {\n//             setUserLocation(\"Error fetching address\");\n//           }\n//         },\n//         () => {\n//           setUserLocation(\"Unable to retrieve your location\");\n//         }\n//       );\n//     } else {\n//       setUserLocation(\"Geolocation is not supported by this browser\");\n//     }\n\n//     const sorted = [...sampleHospitals].sort(\n//       (a, b) => parseFloat(a.distance) - parseFloat(b.distance)\n//     );\n//     setSortedHospitals(sorted);\n//   }, []);\n\n//   return (\n//     <div className=\"Distance-distance-container\">\n//       <h2 className=\"Distance-h2\">{userLocation}</h2>\n\n//       <ul className=\"Distance-hospital-list\">\n//         {sortedHospitals.map((hospital) => (\n//           <li key={hospital.id} className=\"Distance-hospital-item\">\n//             <span className=\"Distance-hospital-name\">{hospital.name}</span>\n//             <div className=\"Distance-congestion-info\">\n//               <span>성인: {hospital.Acongestion}</span>\n//             </div>\n//             <div className=\"Distance-congestion-info\">\n//               <span>소아: {hospital.Bcongestion}</span>\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default DistanceOrder;\n\nconst DistanceOrder = () => {\n  _s();\n  const [sortedHospitals, setSortedHospitals] = useState([]);\n  const [userLocation, setUserLocation] = useState(\"Fetching location...\");\n  const requestPermissionAgain = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        try {\n          const response = await fetch(`https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`, {\n            headers: {\n              Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\",\n              \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n            }\n          });\n          const data = await response.json();\n          if (data.documents && data.documents.length > 0) {\n            const address = data.documents[0].address;\n            setUserLocation(address.address_name);\n          } else {\n            setUserLocation(\"Cannot find address for this location\");\n          }\n        } catch (error) {\n          setUserLocation(\"Error fetching address\");\n        }\n      }, error => {\n        if (error.code === error.PERMISSION_DENIED) {\n          setUserLocation(\"User denied the request for Geolocation.\");\n        } else {\n          setUserLocation(\"Unable to retrieve your location\");\n        }\n      });\n    } else {\n      setUserLocation(\"Geolocation is not supported by this browser\");\n    }\n  };\n  useEffect(() => {\n    requestPermissionAgain(); // 초기 로드 시 권한 요청\n\n    const sorted = [...sampleHospitals].sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));\n    setSortedHospitals(sorted);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Distance-distance-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"Distance-h2\",\n      children: userLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), userLocation === \"User denied the request for Geolocation.\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please allow location access to use this feature.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: requestPermissionAgain,\n        children: \"Request Permission Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"Distance-hospital-list\",\n      children: sortedHospitals.map(hospital => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"Distance-hospital-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"Distance-hospital-name\",\n          children: hospital.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Distance-congestion-info\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\uC131\\uC778: \", hospital.Acongestion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Distance-congestion-info\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\uC18C\\uC544: \", hospital.Bcongestion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)]\n      }, hospital.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(DistanceOrder, \"OTdzFIeu6PVlO6ZjPAX5ty38QQo=\");\n_c = DistanceOrder;\nexport default DistanceOrder;\nvar _c;\n$RefreshReg$(_c, \"DistanceOrder\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","sampleHospitals","id","name","distance","Acongestion","Bcongestion","DistanceOrder","_s","sortedHospitals","setSortedHospitals","userLocation","setUserLocation","requestPermissionAgain","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","headers","Authorization","data","json","documents","length","address","address_name","error","code","PERMISSION_DENIED","sorted","sort","a","b","parseFloat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","hospital","_c","$RefreshReg$"],"sources":["C:/ers/src/screen/DistanceOrder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"../css/DistanceOrder.css\";\r\nimport axios from \"axios\";\r\n\r\nconst sampleHospitals = [\r\n  {\r\n    id: 1,\r\n    name: \"Hospital 1\",\r\n    distance: \"3.1\",\r\n    Acongestion: \"2\",\r\n    Bcongestion: \"2\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Hospital 2\",\r\n    distance: \"2.3\",\r\n    Acongestion: \"1\",\r\n    Bcongestion: \"3\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Hospital 3\",\r\n    distance: \"1.7\",\r\n    Acongestion: \"4\",\r\n    Bcongestion: \"6\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Hospital 4\",\r\n    distance: \"5.4\",\r\n    Acongestion: \"3\",\r\n    Bcongestion: \"4\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Hospital 5\",\r\n    distance: \"4.2\",\r\n    Acongestion: \"4\",\r\n    Bcongestion: \"7\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Hospital 6\",\r\n    distance: \"3.2\",\r\n    Acongestion: \"5\",\r\n    Bcongestion: \"3\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Hospital 7\",\r\n    distance: \"5.7\",\r\n    Acongestion: \"6\",\r\n    Bcongestion: \"2\",\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Hospital 8\",\r\n    distance: \"2.3\",\r\n    Acongestion: \"2\",\r\n    Bcongestion: \"4\",\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Hospital 9\",\r\n    distance: \"6.7\",\r\n    Acongestion: \"7\",\r\n    Bcongestion: \"7\",\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Hospital 10\",\r\n    distance: \"8.2\",\r\n    Acongestion: \"8\",\r\n    Bcongestion: \"3\",\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"Hospital 11\",\r\n    distance: \"9.1\",\r\n    Acongestion: \"2\",\r\n    Bcongestion: \"4\",\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"Hospital 12\",\r\n    distance: \"0.5\",\r\n    Acongestion: \"1\",\r\n    Bcongestion: \"3\",\r\n  },\r\n  // ... 나머지 병원 데이터\r\n];\r\n\r\n// const DistanceOrder = () => {\r\n//   const [sortedHospitals, setSortedHospitals] = useState([]);\r\n//   const [userLocation, setUserLocation] = useState(\"Fetching location...\");\r\n\r\n//   useEffect(() => {\r\n//     // 사용자 위치 가져오기\r\n//     if (navigator.geolocation) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         async (position) => {\r\n//           const latitude = position.coords.latitude;\r\n//           const longitude = position.coords.longitude;\r\n//           try {\r\n//             const response = await fetch(\r\n//               `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,\r\n//               {\r\n//                 headers: {\r\n//                   Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\", // 'KakaoAK'를 사용하여 API 키를 지정합니다.\r\n//                   \"Content-Type\":\r\n//                     \"application/x-www-form-urlencoded;charset=utf-8\", // 이 헤더도 추가합니다.\r\n//                 },\r\n//               }\r\n//             );\r\n//             const data = await response.json();\r\n//             console.log(data);\r\n//             if (data.documents && data.documents.length > 0) {\r\n//               const address = data.documents[0].address;\r\n\r\n//               // const addressComponents = address.address_name.split(\" \");\r\n//               // const first_address = addressComponents[0];\r\n//               // const second_address = addressComponents[1];\r\n//               // DB 연결 및 데이터 전송 로직\r\n//               // axios\r\n//               //   .post(\"YOUR_DB_ENDPOINT\", {\r\n//               //     first_address: first_address,\r\n//               //     second_address: second_address,\r\n//               //   })\r\n//               //   .then((response) => {\r\n//               //     console.log(response.data); // 성공적으로 데이터를 보냈을 때의 응답을 출력\r\n//               //   })\r\n//               //   .catch((error) => {\r\n//               //     console.log(\"Error sending data to DB: \", error);\r\n//               //   });\r\n\r\n//               setUserLocation(address.address_name);\r\n//             } else {\r\n//               setUserLocation(\"Cannot find address for this location\");\r\n//             }\r\n//           } catch (error) {\r\n//             setUserLocation(\"Error fetching address\");\r\n//           }\r\n//         },\r\n//         () => {\r\n//           setUserLocation(\"Unable to retrieve your location\");\r\n//         }\r\n//       );\r\n//     } else {\r\n//       setUserLocation(\"Geolocation is not supported by this browser\");\r\n//     }\r\n\r\n//     const sorted = [...sampleHospitals].sort(\r\n//       (a, b) => parseFloat(a.distance) - parseFloat(b.distance)\r\n//     );\r\n//     setSortedHospitals(sorted);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"Distance-distance-container\">\r\n//       <h2 className=\"Distance-h2\">{userLocation}</h2>\r\n\r\n//       <ul className=\"Distance-hospital-list\">\r\n//         {sortedHospitals.map((hospital) => (\r\n//           <li key={hospital.id} className=\"Distance-hospital-item\">\r\n//             <span className=\"Distance-hospital-name\">{hospital.name}</span>\r\n//             <div className=\"Distance-congestion-info\">\r\n//               <span>성인: {hospital.Acongestion}</span>\r\n//             </div>\r\n//             <div className=\"Distance-congestion-info\">\r\n//               <span>소아: {hospital.Bcongestion}</span>\r\n//             </div>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DistanceOrder;\r\n\r\nconst DistanceOrder = () => {\r\n  const [sortedHospitals, setSortedHospitals] = useState([]);\r\n  const [userLocation, setUserLocation] = useState(\"Fetching location...\");\r\n\r\n  const requestPermissionAgain = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latitude = position.coords.latitude;\r\n          const longitude = position.coords.longitude;\r\n          try {\r\n            const response = await fetch(\r\n              `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,\r\n              {\r\n                headers: {\r\n                  Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\",\r\n                  \"Content-Type\":\r\n                    \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                },\r\n              }\r\n            );\r\n            const data = await response.json();\r\n            if (data.documents && data.documents.length > 0) {\r\n              const address = data.documents[0].address;\r\n              setUserLocation(address.address_name);\r\n            } else {\r\n              setUserLocation(\"Cannot find address for this location\");\r\n            }\r\n          } catch (error) {\r\n            setUserLocation(\"Error fetching address\");\r\n          }\r\n        },\r\n        (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            setUserLocation(\"User denied the request for Geolocation.\");\r\n          } else {\r\n            setUserLocation(\"Unable to retrieve your location\");\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setUserLocation(\"Geolocation is not supported by this browser\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestPermissionAgain(); // 초기 로드 시 권한 요청\r\n\r\n    const sorted = [...sampleHospitals].sort(\r\n      (a, b) => parseFloat(a.distance) - parseFloat(b.distance)\r\n    );\r\n    setSortedHospitals(sorted);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Distance-distance-container\">\r\n      <h2 className=\"Distance-h2\">{userLocation}</h2>\r\n      {userLocation === \"User denied the request for Geolocation.\" && (\r\n        <div>\r\n          <p>Please allow location access to use this feature.</p>\r\n          <button onClick={requestPermissionAgain}>\r\n            Request Permission Again\r\n          </button>\r\n        </div>\r\n      )}\r\n      <ul className=\"Distance-hospital-list\">\r\n        {sortedHospitals.map((hospital) => (\r\n          <li key={hospital.id} className=\"Distance-hospital-item\">\r\n            <span className=\"Distance-hospital-name\">{hospital.name}</span>\r\n            <div className=\"Distance-congestion-info\">\r\n              <span>성인: {hospital.Acongestion}</span>\r\n            </div>\r\n            <div className=\"Distance-congestion-info\">\r\n              <span>소아: {hospital.Bcongestion}</span>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistanceOrder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}