{"ast":null,"code":"import axios from 'axios';\nimport { Cookies } from 'react-cookie';\nimport { parseJwt } from './JwtUtils';\nimport { config } from './Constants';\nexport const apiUtils = {\n  signIn,\n  signUp\n};\nconst cookies = new Cookies();\nfunction getTokenByRefreshToken(refreshToken) {\n  return instance.get('/auth/refreshToken', {\n    headers: {\n      Authorization: bearerRefresh(refreshToken)\n    }\n  });\n}\nfunction signIn(data) {\n  const url = '/auth/signIn';\n  return instance.post(url, data, {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n}\n\n// JWT 토큰을 담아서 보내는 예시, 토큰을 갖고 개인 정보를 불러옴\nfunction getUserInfo(user) {\n  const url = `/user`;\n  return instance.get(url, {\n    headers: {\n      'Authorization': bearerAccess(user)\n    }\n  });\n}\nfunction signUp(user) {\n  return instance.post('/auth/signUp', user, {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n}\n\n// -- Axios\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n});\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const error_msg = error.response.data;\n  const status_code = error.response.status;\n  const refreshToken = cookies.get('refreshToken');\n\n  // 만약, JWT access token 이 유효하지 않아서 오류가 있다면,\n  if (status_code === 401 && error_msg === 'JWT Exception') {\n    if (refreshToken) {\n      // refresh token 을 사용해서 다시 서버에 요청\n      return getTokenByRefreshToken(refreshToken)\n      // 만약 refresh token 이 유효하다면\n      .then(result => {\n        // 서버로 부터 새 access token, refresh token 을 발급 받음\n        const {\n          accessToken,\n          refreshToken\n        } = result.data;\n        const data = parseJwt(accessToken);\n        const user = {\n          data,\n          accessToken\n        };\n\n        // refresh token 을 쿠키에 저장\n        cookies.set('refreshToken', refreshToken, {\n          path: '/'\n        });\n\n        // access token 을 이용해서 localStorage 에 user 정보 업데이트\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // 이전에 요청했던 것 수행 (access token 오류로 인해서 실행하지 못했던 것)\n        const originalRequest = error.config;\n        originalRequest.headers['Authorization'] = bearerAccess(user);\n        return axios(originalRequest);\n      })\n      // 만약 refresh token 도 유효하지 않아서 오류가 발생한다면 로그인 페이지로 이동\n      .catch(error => {\n        window.location.href = '/authentication/sign-in/';\n      });\n    } else {\n      window.location.href = '/authentication/sign-in/';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// -- Helper functions\n\nfunction bearerAccess(user) {\n  return `Bearer ${user.accessToken}`;\n}\nfunction bearerRefresh(refreshToken) {\n  return `Bearer ${refreshToken}`;\n}","map":{"version":3,"names":["axios","Cookies","parseJwt","config","apiUtils","signIn","signUp","cookies","getTokenByRefreshToken","refreshToken","instance","get","headers","Authorization","bearerRefresh","data","url","post","getUserInfo","user","bearerAccess","create","baseURL","API_BASE_URL","interceptors","response","use","error","error_msg","status_code","status","then","result","accessToken","set","path","localStorage","setItem","JSON","stringify","originalRequest","catch","window","location","href","Promise","reject"],"sources":["D:/OneDrive - dgu.ac.kr/바탕 화면/공부/Spring/ER_SENTINEL_CtrlCV/src/utils/ApiUtils.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Cookies } from 'react-cookie';\r\nimport { parseJwt } from './JwtUtils';\r\nimport { config } from './Constants';\r\n\r\nexport const apiUtils = {\r\n    signIn,\r\n    signUp,\r\n};\r\n\r\nconst cookies = new Cookies();\r\n\r\nfunction getTokenByRefreshToken(refreshToken) {\r\n  return instance.get('/auth/refreshToken', {\r\n    headers: { Authorization: bearerRefresh(refreshToken) },\r\n  });\r\n}\r\n\r\nfunction signIn(data) {\r\n  const url = '/auth/signIn';\r\n  return instance.post(url, data, {\r\n    headers: { 'Content-type': 'application/json' },\r\n  });\r\n}\r\n\r\n// JWT 토큰을 담아서 보내는 예시, 토큰을 갖고 개인 정보를 불러옴\r\nfunction getUserInfo(user) {\r\n  const url = `/user`;\r\n  return instance.get(url, {\r\n    headers: {'Authorization': bearerAccess(user)}\r\n  })\r\n}\r\n\r\nfunction signUp(user) {\r\n  return instance.post('/auth/signUp', user, {\r\n    headers: {'Content-type': 'application/json'}\r\n  })\r\n}\r\n\r\n// -- Axios\r\nconst instance = axios.create({\r\n  baseURL: config.url.API_BASE_URL,\r\n});\r\n\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    const error_msg = error.response.data;\r\n    const status_code = error.response.status;\r\n    const refreshToken = cookies.get('refreshToken');\r\n\r\n    // 만약, JWT access token 이 유효하지 않아서 오류가 있다면,\r\n    if (status_code === 401 && error_msg === 'JWT Exception') {\r\n      if (refreshToken) {\r\n        // refresh token 을 사용해서 다시 서버에 요청\r\n        return (\r\n          getTokenByRefreshToken(refreshToken)\r\n            // 만약 refresh token 이 유효하다면\r\n            .then((result) => {\r\n              // 서버로 부터 새 access token, refresh token 을 발급 받음\r\n              const { accessToken, refreshToken } = result.data;\r\n              const data = parseJwt(accessToken);\r\n              const user = { data, accessToken };\r\n\r\n              // refresh token 을 쿠키에 저장\r\n              cookies.set('refreshToken', refreshToken, {\r\n                path: '/',\r\n              });\r\n\r\n              // access token 을 이용해서 localStorage 에 user 정보 업데이트\r\n              localStorage.setItem('user', JSON.stringify(user));\r\n\r\n              // 이전에 요청했던 것 수행 (access token 오류로 인해서 실행하지 못했던 것)\r\n              const originalRequest = error.config;\r\n              originalRequest.headers['Authorization'] = bearerAccess(user);\r\n              return axios(originalRequest);\r\n            })\r\n            // 만약 refresh token 도 유효하지 않아서 오류가 발생한다면 로그인 페이지로 이동\r\n            .catch((error) => {\r\n              window.location.href = '/authentication/sign-in/';\r\n            })\r\n        );\r\n      } else {\r\n        window.location.href = '/authentication/sign-in/';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n// -- Helper functions\r\n\r\nfunction bearerAccess(user) {\r\n  return `Bearer ${user.accessToken}`;\r\n}\r\n\r\nfunction bearerRefresh(refreshToken) {\r\n  return `Bearer ${refreshToken}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}