{"ast":null,"code":"var _jsxFileName = \"C:\\\\ers\\\\src\\\\screen\\\\CongestionLevelOrder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../css/CongestionLevelOrder.css\"; // CSS 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleData = [{\n  id: 1,\n  name: \"Location A\",\n  Acongestion: \"10\",\n  Bcongestion: \"10\"\n}, {\n  id: 2,\n  name: \"Location B\",\n  Acongestion: \"9\",\n  Bcongestion: \"6\"\n}, {\n  id: 3,\n  name: \"Location C\",\n  Acongestion: \"8\",\n  Bcongestion: \"7\"\n}, {\n  id: 4,\n  name: \"Location D\",\n  Acongestion: \"6\",\n  Bcongestion: \"1\"\n}, {\n  id: 5,\n  name: \"Location E\",\n  Acongestion: \"5\",\n  Bcongestion: \"4\"\n}, {\n  id: 6,\n  name: \"Location F\",\n  Acongestion: \"2\",\n  Bcongestion: \"5\"\n}];\nconst CongestionLevelOrder = () => {\n  _s();\n  const [sortedData, setSortedData] = useState([...sampleData]);\n  const [activeButton, setActiveButton] = useState(\"\"); // 활성화된 버튼을 추적하기 위한 state 추가\n\n  const handleSort = type => {\n    const sorted = [...sampleData].sort((a, b) => {\n      if (type === \"adult\") {\n        setActiveButton(\"adult\");\n        return parseInt(a.Acongestion) - parseInt(b.Acongestion);\n      } else {\n        setActiveButton(\"child\");\n        return parseInt(a.Bcongestion) - parseInt(b.Bcongestion);\n      }\n    });\n    setSortedData(sorted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CongestionLevelOrder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"CongestionLevelOrder-h2\",\n      children: \"\\uD63C\\uC7A1\\uB3C4 \\uAE30\\uC900\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CongestionLevelOrder-button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort(\"adult\"),\n        className: activeButton === \"adult\" ? \"active\" : \"\",\n        children: \"\\uC131\\uC778 \\uD63C\\uC7A1\\uB3C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort(\"child\"),\n        className: activeButton === \"child\" ? \"active\" : \"\",\n        children: \"\\uC18C\\uC544 \\uD63C\\uC7A1\\uB3C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"CongestionLevelOrder-list\",\n      children: sortedData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"CongestionLevelOrder-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"CongestionLevelOrder-name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"CongestionLevelOrder-distance\",\n          children: [\"\\uC131\\uC778: \", item.Acongestion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"CongestionLevelOrder-congestion-info\",\n          children: [\"\\uC18C\\uC544: \", item.Bcongestion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(CongestionLevelOrder, \"rycw2Yhu9YKRcHzmATrSHiOTtKo=\");\n_c = CongestionLevelOrder;\nexport default CongestionLevelOrder;\nvar _c;\n$RefreshReg$(_c, \"CongestionLevelOrder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","sampleData","id","name","Acongestion","Bcongestion","CongestionLevelOrder","_s","sortedData","setSortedData","activeButton","setActiveButton","handleSort","type","sorted","sort","a","b","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","_c","$RefreshReg$"],"sources":["C:/ers/src/screen/CongestionLevelOrder.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../css/CongestionLevelOrder.css\"; // CSS 파일 import\r\n\r\nconst sampleData = [\r\n  { id: 1, name: \"Location A\", Acongestion: \"10\", Bcongestion: \"10\" },\r\n  { id: 2, name: \"Location B\", Acongestion: \"9\", Bcongestion: \"6\" },\r\n  { id: 3, name: \"Location C\", Acongestion: \"8\", Bcongestion: \"7\" },\r\n  { id: 4, name: \"Location D\", Acongestion: \"6\", Bcongestion: \"1\" },\r\n  { id: 5, name: \"Location E\", Acongestion: \"5\", Bcongestion: \"4\" },\r\n  { id: 6, name: \"Location F\", Acongestion: \"2\", Bcongestion: \"5\" },\r\n];\r\n\r\nconst CongestionLevelOrder = () => {\r\n  const [sortedData, setSortedData] = useState([...sampleData]);\r\n  const [activeButton, setActiveButton] = useState(\"\"); // 활성화된 버튼을 추적하기 위한 state 추가\r\n\r\n  const handleSort = (type) => {\r\n    const sorted = [...sampleData].sort((a, b) => {\r\n      if (type === \"adult\") {\r\n        setActiveButton(\"adult\");\r\n        return parseInt(a.Acongestion) - parseInt(b.Acongestion);\r\n      } else {\r\n        setActiveButton(\"child\");\r\n        return parseInt(a.Bcongestion) - parseInt(b.Bcongestion);\r\n      }\r\n    });\r\n    setSortedData(sorted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"CongestionLevelOrder-container\">\r\n      <h2 className=\"CongestionLevelOrder-h2\">혼잡도 기준</h2>\r\n      <div className=\"CongestionLevelOrder-button-group\">\r\n        <button\r\n          onClick={() => handleSort(\"adult\")}\r\n          className={activeButton === \"adult\" ? \"active\" : \"\"}\r\n        >\r\n          성인 혼잡도\r\n        </button>\r\n        <button\r\n          onClick={() => handleSort(\"child\")}\r\n          className={activeButton === \"child\" ? \"active\" : \"\"}\r\n        >\r\n          소아 혼잡도\r\n        </button>\r\n      </div>\r\n\r\n      <ul className=\"CongestionLevelOrder-list\">\r\n        {sortedData.map((item) => (\r\n          <li key={item.id} className=\"CongestionLevelOrder-item\">\r\n            <span className=\"CongestionLevelOrder-name\">{item.name}</span>\r\n            <span className=\"CongestionLevelOrder-distance\">\r\n              성인: {item.Acongestion}\r\n            </span>\r\n            <span className=\"CongestionLevelOrder-congestion-info\">\r\n              소아: {item.Bcongestion}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CongestionLevelOrder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}