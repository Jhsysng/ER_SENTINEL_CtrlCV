[{"C:\\ers\\src\\index.js":"1","C:\\ers\\src\\App.js":"2","C:\\ers\\src\\reportWebVitals.js":"3","C:\\ers\\src\\screen\\Login.js":"4","C:\\ers\\src\\screen\\Regist.js":"5","C:\\ers\\src\\screen\\Main.js":"6","C:\\ers\\src\\screen\\DistanceOrder.js":"7","C:\\ers\\src\\screen\\CongestionLevelOrder.js":"8","C:\\ers\\src\\screen\\MapOrder.js":"9","C:\\ers\\src\\screen\\HInfo.js":"10","C:\\ers\\src\\screen\\LoginCallbackPage.js":"11","C:\\ers\\src\\screen\\AuthContext.js":"12","C:\\ers\\src\\utils\\JwtUtils.js":"13"},{"size":728,"mtime":1692238207710,"results":"14","hashOfConfig":"15"},{"size":1077,"mtime":1692237950826,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1691592108597,"results":"17","hashOfConfig":"15"},{"size":2710,"mtime":1692238753447,"results":"18","hashOfConfig":"15"},{"size":2165,"mtime":1692078824707,"results":"19","hashOfConfig":"15"},{"size":1059,"mtime":1692238290028,"results":"20","hashOfConfig":"15"},{"size":5922,"mtime":1692237875698,"results":"21","hashOfConfig":"15"},{"size":5945,"mtime":1692237889916,"results":"22","hashOfConfig":"15"},{"size":11529,"mtime":1692188097901,"results":"23","hashOfConfig":"15"},{"size":13993,"mtime":1692234047668,"results":"24","hashOfConfig":"15"},{"size":1278,"mtime":1692238231434,"results":"25","hashOfConfig":"15"},{"size":1421,"mtime":1692196686000,"results":"26","hashOfConfig":"15"},{"size":223,"mtime":1690461618000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1wxfzp3",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"31"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\ers\\src\\index.js",[],[],[],"C:\\ers\\src\\App.js",[],[],"C:\\ers\\src\\reportWebVitals.js",[],[],"C:\\ers\\src\\screen\\Login.js",["73","74","75","76","77","78"],[],"C:\\ers\\src\\screen\\Regist.js",[],[],"C:\\ers\\src\\screen\\Main.js",[],[],"C:\\ers\\src\\screen\\DistanceOrder.js",["79","80","81","82","83"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport \"../css/DistanceOrder.css\";\r\nimport axios from \"axios\";\r\n\r\n// Todo: 이거 나중에 지우기\r\nconst sampleHospitals = [\r\n  {\r\n    id: 1,\r\n    dutyId: \"A000001\",\r\n    name: \"Hospital 1\",\r\n    distance: \"3.1\",\r\n    adultpercent: \"2\",\r\n    pediatricpercent: \"2\",\r\n  },\r\n  {\r\n    id: 2,\r\n    dutyId: \"A000002\",\r\n    name: \"Hospital 2\",\r\n    distance: \"2.3\",\r\n    adultpercent: \"1\",\r\n    pediatricpercent: \"3\",\r\n  },\r\n  {\r\n    id: 3,\r\n    dutyId: \"A000003\",\r\n    name: \"Hospital 3\",\r\n    distance: \"1.7\",\r\n    adultpercent: \"4\",\r\n    pediatricpercent: \"6\",\r\n  },\r\n  {\r\n    id: 4,\r\n    dutyId: \"A000004\",\r\n    name: \"Hospital 4\",\r\n    distance: \"5.4\",\r\n    adultpercent: \"3\",\r\n    pediatricpercent: \"4\",\r\n  },\r\n  {\r\n    id: 5,\r\n    dutyId: \"A000005\",\r\n    name: \"Hospital 5\",\r\n    distance: \"4.2\",\r\n    adultpercent: \"4\",\r\n    pediatricpercent: \"7\",\r\n  },\r\n  {\r\n    id: 6,\r\n    dutyId: \"A000006\",\r\n    name: \"Hospital 6\",\r\n    distance: \"3.2\",\r\n    adultpercent: \"5\",\r\n    pediatricpercent: \"3\",\r\n  },\r\n  {\r\n    id: 7,\r\n    dutyId: \"A000007\",\r\n    name: \"Hospital 7\",\r\n    distance: \"5.7\",\r\n    adultpercent: \"6\",\r\n    pediatricpercent: \"2\",\r\n  },\r\n  {\r\n    id: 8,\r\n    dutyId: \"A000008\",\r\n    name: \"Hospital 8\",\r\n    distance: \"2.3\",\r\n    adultpercent: \"2\",\r\n    pediatricpercent: \"4\",\r\n  },\r\n  {\r\n    id: 9,\r\n    dutyId: \"A000009\",\r\n    name: \"Hospital 9\",\r\n    distance: \"6.7\",\r\n    adultpercent: \"7\",\r\n    pediatricpercent: \"7\",\r\n  },\r\n  {\r\n    id: 10,\r\n    dutyId: \"A0000010\",\r\n    name: \"Hospital 10\",\r\n    distance: \"8.2\",\r\n    adultpercent: \"8\",\r\n    pediatricpercent: \"3\",\r\n  },\r\n  {\r\n    id: 11,\r\n    dutyId: \"A0000011\",\r\n    name: \"Hospital 11\",\r\n    distance: \"9.1\",\r\n    adultpercent: \"2\",\r\n    pediatricpercent: \"4\",\r\n  },\r\n  {\r\n    id: 12,\r\n    dutyId: \"A0000012\",\r\n    name: \"Hospital 12\",\r\n    distance: \"0.5\",\r\n    adultpercent: \"1\",\r\n    pediatricpercent: \"3\",\r\n  },\r\n];\r\n\r\nconst DistanceOrder = () => {\r\n  const [sortedHospitals, setSortedHospitals] = useState([]);\r\n  const [userLocation, setUserLocation] = useState(\"Fetching location...\");\r\n  const [Latitude, setLatitude] = useState(\"\");\r\n  const [Longitude, setLongitude] = useState(\"\");\r\n  const Navigate = useNavigate();\r\n  // Todo: 백 API 연결하기\r\n  const BackAPI = \"\";\r\n\r\n  const handleHospitalClick = (hospitalCode) => {\r\n    Navigate(`/HInfo/${hospitalCode}`);\r\n  };\r\n\r\n  const requestPermissionAgain = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latitude = position.coords.latitude;\r\n          const longitude = position.coords.longitude;\r\n          setLatitude(latitude);\r\n          setLongitude(longitude);\r\n          try {\r\n            const response = await fetch(\r\n              `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,\r\n              {\r\n                headers: {\r\n                  Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\",\r\n                  \"Content-Type\":\r\n                    \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                },\r\n              }\r\n            );\r\n            const data = await response.json();\r\n            if (data.documents && data.documents.length > 0) {\r\n              const address = data.documents[0].address;\r\n              setUserLocation(address.address_name);\r\n            } else {\r\n              setUserLocation(\"Cannot find address for this location\");\r\n            }\r\n          } catch (error) {\r\n            setUserLocation(\"Error fetching address\");\r\n          }\r\n        },\r\n        (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            setUserLocation(\"User denied the request for Geolocation.\");\r\n          } else {\r\n            setUserLocation(\"Unable to retrieve your location\");\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      setUserLocation(\"Geolocation is not supported by this browser\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestPermissionAgain(); // 초기 로드 시 권한 요청\r\n\r\n    /* Todo: 백 연결 하고 주석 부분 풀기\r\n    if (userLocation !== \"Fetching location...\") {\r\n      axios.post(BackAPI, { lon: Latitude, lat: Longitude })\r\n        .then(response => {\r\n          setSortedHospitals(response.data.hospitals);\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error fetching hospitals:\", error);\r\n        });\r\n    }\r\n    */\r\n\r\n    // Todo: 백 연결하고 이거 바꿔주기 distance 없음\r\n    const sorted = [...sampleHospitals].sort(\r\n      (a, b) => parseFloat(a.distance) - parseFloat(b.distance)\r\n    );\r\n    setSortedHospitals(sorted);\r\n  }, [userLocation]);\r\n\r\n  return (\r\n    <div className=\"Distance-distance-container\">\r\n      <h2 className=\"Distance-h2\">{userLocation}</h2>\r\n      {userLocation === \"User denied the request for Geolocation.\" && (\r\n        <div>\r\n          <p>Please allow location access to use this feature.</p>\r\n          <button onClick={requestPermissionAgain}>\r\n            Request Permission Again\r\n          </button>\r\n        </div>\r\n      )}\r\n      <ul className=\"Distance-hospital-list\">\r\n        {sortedHospitals.map((hospital) => (\r\n          <li\r\n            key={hospital.id}\r\n            className=\"Distance-hospital-item\"\r\n            onClick={() => handleHospitalClick(hospital.dutyId)}\r\n          >\r\n            <span className=\"Distance-hospital-name\">{hospital.name}</span>\r\n            <div className=\"Distance-congestion-info\">\r\n              <span>성인: {hospital.adultpercent}</span>\r\n            </div>\r\n            <div className=\"Distance-congestion-info\">\r\n              <span>소아: {hospital.pediatricpercent}</span>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistanceOrder;\r\n","C:\\ers\\src\\screen\\CongestionLevelOrder.js",["84","85","86","87"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"../css/CongestionLevelOrder.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Todo: 이거 나중에 지우기\r\nconst sampleData = [\r\n  {\r\n    id: 1,\r\n    name: \"Location A\",\r\n    adultpercent: \"10\",\r\n    pediatricpercent: \"10\",\r\n    dutyId: \"A000001\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Location B\",\r\n    adultpercent: \"9\",\r\n    pediatricpercent: \"6\",\r\n    dutyId: \"A000002\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Location C\",\r\n    adultpercent: \"8\",\r\n    pediatricpercent: \"7\",\r\n    dutyId: \"A000003\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Location D\",\r\n    adultpercent: \"6\",\r\n    pediatricpercent: \"1\",\r\n    dutyId: \"A000004\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Location E\",\r\n    adultpercent: \"5\",\r\n    pediatricpercent: \"4\",\r\n    dutyId: \"A000005\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Location F\",\r\n    adultpercent: \"2\",\r\n    pediatricpercent: \"5\",\r\n    dutyId: \"A000006\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Location D\",\r\n    adultpercent: \"12\",\r\n    pediatricpercent: \"11\",\r\n    dutyId: \"A000007\",\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Location E\",\r\n    adultpercent: \"53\",\r\n    pediatricpercent: \"41\",\r\n    dutyId: \"A000008\",\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Location F\",\r\n    adultpercent: \"21\",\r\n    pediatricpercent: \"51\",\r\n    dutyId: \"A000009\",\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Location D\",\r\n    adultpercent: \"63\",\r\n    pediatricpercent: \"12\",\r\n    dutyId: \"A000010\",\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"Location E\",\r\n    adultpercent: \"54\",\r\n    pediatricpercent: \"43\",\r\n    dutyId: \"A000011\",\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"Location F\",\r\n    adultpercent: \"25\",\r\n    pediatricpercent: \"53\",\r\n    dutyId: \"A000012\",\r\n  },\r\n];\r\n\r\nconst CongestionLevelOrder = () => {\r\n  const [sortedData, setSortedData] = useState([...sampleData]);\r\n  const [activeButton, setActiveButton] = useState(\"\");\r\n  const [firstAddress, setFirstAddress] = useState(\"\");\r\n  const [secondAddress, setSecondAddress] = useState(\"\");\r\n  const Navigate = useNavigate();\r\n  // Todo: 백이랑 API 연결하기\r\n  const BackAPI = \"\";\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latitude = position.coords.latitude;\r\n          const longitude = position.coords.longitude;\r\n          try {\r\n            const response = await fetch(\r\n              `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,\r\n              {\r\n                headers: {\r\n                  Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\",\r\n                  \"Content-Type\":\r\n                    \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                },\r\n              }\r\n            );\r\n            const data = await response.json();\r\n            if (data.documents && data.documents.length > 0) {\r\n              const address = data.documents[0].address;\r\n              setFirstAddress(address.region_1depth_name); // 시 \r\n              setSecondAddress(address.region_2depth_name); // 구\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error fetching address\", error);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting geolocation\", error);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  // Todo: 아마 이거 혼잡도 개념 바뀔거임 정렬 sampleData 나중에 고치기\r\n  const handleSort = async (type) => {\r\n    if (type === \"adult\") {\r\n      setActiveButton(\"adult\");\r\n      const sorted = [...sampleData].sort(\r\n        (a, b) => parseInt(a.adultpercent) - parseInt(b.adultpercent)\r\n      );\r\n      setSortedData(sorted);\r\n    } else {\r\n      setActiveButton(\"child\");\r\n      const sorted = [...sampleData].sort(\r\n        (a, b) => parseInt(a.pediatricpercent) - parseInt(b.pediatricpercent)\r\n      );\r\n      setSortedData(sorted);\r\n    }\r\n\r\n    /* Todo: 백 연결하고 이거 주석 처리 풀기\r\n    try {\r\n      const response = await axios.get(/api/BackAPI, {\r\n        params: {\r\n          Firstaddress: firstAddress,\r\n          secondaddress: secondAddress,\r\n          isadult: type === \"adult\",\r\n        }\r\n      });\r\n\r\n      if (response.data) {\r\n        // 백엔드에서 받은 병원 데이터로 상태 업데이트\r\n        setSortedData(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching sorted hospitals\", error);\r\n    }\r\n    */\r\n  };\r\n\r\n  const handleItemClick = (dutyId) => {\r\n    Navigate(`/HInfo/${dutyId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"CongestionLevelOrder-container\">\r\n      <h2 className=\"CongestionLevelOrder-h2\">혼잡도 기준</h2>\r\n      <div className=\"CongestionLevelOrder-button-group\">\r\n        <button\r\n          onClick={() => handleSort(\"adult\")}\r\n          className={activeButton === \"adult\" ? \"active\" : \"\"}\r\n        >\r\n          성인 혼잡도\r\n        </button>\r\n        <button\r\n          onClick={() => handleSort(\"child\")}\r\n          className={activeButton === \"child\" ? \"active\" : \"\"}\r\n        >\r\n          소아 혼잡도\r\n        </button>\r\n      </div>\r\n\r\n      <ul className=\"CongestionLevelOrder-list\">\r\n        {sortedData.map((item) => (\r\n          // Todo: 이거 나중에 id 바꾸기\r\n          <li\r\n            key={item.id}\r\n            className=\"CongestionLevelOrder-item\"\r\n            onClick={() => handleItemClick(item.dutyId)}\r\n          >\r\n            <span className=\"CongestionLevelOrder-name\">{item.name}</span>\r\n            <span className=\"CongestionLevelOrder-congestion-info\">\r\n              성인: {item.adultpercent}\r\n            </span>\r\n            <span className=\"CongestionLevelOrder-congestion-info\">\r\n              소아: {item.pediatricpercent}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CongestionLevelOrder;\r\n\r\n// Todo : api 연동, 미션, css ","C:\\ers\\src\\screen\\MapOrder.js",["88","89","90","91","92","93","94"],[],"/* global kakao */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport greenSign from \"../components/greensign.png\";\r\nimport orangeSign from \"../components/orangesign.png\";\r\nimport redSign from \"../components/redsign.png\";\r\nimport yellowSign from \"../components/yellowsign.png\";\r\nimport foursign from \"../components/foursign.png\";\r\nimport usericon from \"../components/usericon.png\";\r\nimport \"../css/MapOrder.css\";\r\nimport axios from \"axios\";\r\n\r\n// Todo: 이거 나중에 지우기\r\nconst sampleHospitals = [\r\n  {\r\n    id: 1,\r\n    name: \"Hospital 1\",\r\n    latitude: 33.450701,\r\n    longitude: 126.570667,\r\n    adultpercent: 2,\r\n    pediatricpercent: 4,\r\n    dutyId: \"A1000001\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Hospital 2\",\r\n    latitude: 33.451701,\r\n    longitude: 126.571667,\r\n    adultpercent: 5,\r\n    pediatricpercent: 6,\r\n    dutyId: \"A1000002\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Hospital 3\",\r\n    latitude: 33.452701,\r\n    longitude: 126.572667,\r\n    adultpercent: 4,\r\n    pediatricpercent: 2,\r\n    dutyId: \"A1000003\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Hospital 4\",\r\n    latitude: 33.455701,\r\n    longitude: 126.575667,\r\n    adultpercent: 15,\r\n    pediatricpercent: 10,\r\n    dutyId: \"A1000004\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Hospital 5\",\r\n    latitude: 33.451201,\r\n    longitude: 126.568867,\r\n    adultpercent: 20,\r\n    pediatricpercent: 5,\r\n    dutyId: \"A1000005\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Hospital 6\",\r\n    latitude: 33.448701,\r\n    longitude: 126.573267,\r\n    adultpercent: 5,\r\n    pediatricpercent: 12,\r\n    dutyId: \"A1000006\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Hospital 7\",\r\n    latitude: 33.453701,\r\n    longitude: 126.572267,\r\n    adultpercent: 8,\r\n    pediatricpercent: 8,\r\n    dutyId: \"A1000007\",\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Hospital 8\",\r\n    latitude: 33.452701,\r\n    longitude: 126.574867,\r\n    adultpercent: 2,\r\n    pediatricpercent: 15,\r\n    dutyId: \"A1000008\",\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Hospital 9\",\r\n    latitude: 33.449701,\r\n    longitude: 126.569867,\r\n    adultpercent: 22,\r\n    pediatricpercent: 14,\r\n    dutyId: \"A1000009\",\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Hospital 10\",\r\n    latitude: 33.454701,\r\n    longitude: 126.568267,\r\n    adultpercent: 12,\r\n    pediatricpercent: 4,\r\n    dutyId: \"A1000010\",\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"Hospital 11\",\r\n    latitude: 33.456701,\r\n    longitude: 126.576667,\r\n    adultpercent: 3,\r\n    pediatricpercent: 10,\r\n    dutyId: \"A1000011\",\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"Hospital 12\",\r\n    latitude: 33.447701,\r\n    longitude: 126.571867,\r\n    adultpercent: 10,\r\n    pediatricpercent: 20,\r\n    dutyId: \"A1000012\",\r\n  },\r\n  {\r\n    id: 13,\r\n    name: \"Hospital 13\",\r\n    latitude: 33.458701,\r\n    longitude: 126.573867,\r\n    adultpercent: 18,\r\n    pediatricpercent: 6,\r\n    dutyId: \"A1000013\",\r\n  },\r\n  {\r\n    id: 14,\r\n    name: \"Hospital 14\",\r\n    latitude: 33.456701,\r\n    longitude: 126.578867,\r\n    adultpercent: 21,\r\n    pediatricpercent: 8,\r\n    dutyId: \"A1000014\",\r\n  },\r\n  {\r\n    id: 15,\r\n    name: \"Hospital 15\",\r\n    latitude: 33.457701,\r\n    longitude: 126.572867,\r\n    adultpercent: 7,\r\n    pediatricpercent: 9,\r\n    dutyId: \"A1000015\",\r\n  },\r\n  {\r\n    id: 16,\r\n    name: \"Hospital 16\",\r\n    latitude: 33.451701,\r\n    longitude: 126.577867,\r\n    adultpercent: 9,\r\n    pediatricpercent: 16,\r\n    dutyId: \"A1000016\",\r\n  },\r\n  {\r\n    id: 17,\r\n    name: \"Hospital 17\",\r\n    latitude: 33.450701,\r\n    longitude: 126.574867,\r\n    adultpercent: 19,\r\n    pediatricpercent: 18,\r\n    dutyId: \"A1000017\",\r\n  },\r\n  {\r\n    id: 18,\r\n    name: \"Hospital 18\",\r\n    latitude: 33.459701,\r\n    longitude: 126.575867,\r\n    adultpercent: 6,\r\n    pediatricpercent: 12,\r\n    dutyId: \"A1000018\",\r\n  },\r\n  {\r\n    id: 19,\r\n    name: \"Hospital 19\",\r\n    latitude: 33.455701,\r\n    longitude: 126.579867,\r\n    adultpercent: 14,\r\n    pediatricpercent: 22,\r\n    dutyId: \"A1000019\",\r\n  },\r\n  {\r\n    id: 20,\r\n    name: \"Hospital 20\",\r\n    latitude: 33.457701,\r\n    longitude: 126.576867,\r\n    adultpercent: 23,\r\n    pediatricpercent: 3,\r\n    dutyId: \"A1000020\",\r\n  },\r\n  {\r\n    id: 21,\r\n    name: \"Hospital 21\",\r\n    latitude: 33.453701,\r\n    longitude: 126.577867,\r\n    adultpercent: 13,\r\n    pediatricpercent: 7,\r\n    dutyId: \"A1000021\",\r\n  },\r\n  {\r\n    id: 22,\r\n    name: \"Hospital 22\",\r\n    latitude: 33.452701,\r\n    longitude: 126.570867,\r\n    adultpercent: 11,\r\n    pediatricpercent: 10,\r\n    dutyId: \"A1000022\",\r\n  },\r\n  {\r\n    id: 23,\r\n    name: \"Hospital 23\",\r\n    latitude: 33.458701,\r\n    longitude: 126.572867,\r\n    adultpercent: 4,\r\n    pediatricpercent: 19,\r\n    dutyId: \"A1000023\",\r\n  },\r\n];\r\n\r\nconst MapOrder = () => {\r\n  const [congestionType, setCongestionType] = useState(\"adultpercent\");\r\n  const [firstAddress, setFirstAddress] = useState(\"\");\r\n  const [secondAddress, setSecondAddress] = useState(\"\");\r\n  const Navigate = useNavigate();\r\n  let currentOverlay = null;\r\n  // Todo: 백 API랑 연결하기\r\n  const BackAPI = \"\";\r\n\r\n  useEffect(() => {\r\n    var mapContainer = document.getElementById(\"map\");\r\n\r\n    var mapOption = {\r\n      center: new kakao.maps.LatLng(37.5665, 126.978),\r\n      level: 10,\r\n    };\r\n\r\n    var map = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n    kakao.maps.event.addListener(map, \"zoom_changed\", function () {\r\n      const zoomLevel = map.getLevel();\r\n      const size = new kakao.maps.Size(40 - zoomLevel * 2, 40 - zoomLevel * 2);\r\n    });\r\n\r\n    // Todo: 이거 나중에 혼잡도 숫자 맞춰주기\r\n    const displayHospitalsOnMap = (hospitals) => {\r\n      hospitals.forEach((hospital) => {\r\n        const position = new kakao.maps.LatLng(\r\n          hospital.latitude,\r\n          hospital.longitude\r\n        );\r\n        let iconSrc;\r\n        const congestionValue = hospital[congestionType];\r\n        if (congestionValue >= 20) {\r\n          iconSrc = redSign;\r\n        } else if (congestionValue >= 10) {\r\n          iconSrc = orangeSign;\r\n        } else if (congestionValue >= 5) {\r\n          iconSrc = yellowSign;\r\n        } else if (congestionValue >= 0) {\r\n          iconSrc = greenSign;\r\n        }\r\n        const imageSize = new kakao.maps.Size(40, 40);\r\n        const imageOption = { offset: new kakao.maps.Point(27, 69) };\r\n        const markerImage = new kakao.maps.MarkerImage(\r\n          iconSrc,\r\n          imageSize,\r\n          imageOption\r\n        );\r\n        const marker = new kakao.maps.Marker({\r\n          position: position,\r\n          image: markerImage,\r\n        });\r\n        marker.setMap(map);\r\n\r\n        // 커스텀 오버레이에 표시할 내용입니다\r\n        const content = `<div class =\"label\">\r\n          <span class=\"left\"></span>\r\n          <span class=\"center\">${hospital.name}: ${congestionValue} 혼잡도</span>\r\n          <span class=\"right\"></span>\r\n          </div>`;\r\n\r\n        const customOverlay = new kakao.maps.CustomOverlay({\r\n          position: position,\r\n          content: content,\r\n        });\r\n\r\n        // 마커를 클릭했을 때 커스텀 오버레이를 표시하거나 병원 페이지로 이동\r\n        kakao.maps.event.addListener(marker, \"click\", function () {\r\n          if (currentOverlay === customOverlay) {\r\n            // 현재 클릭한 마커와 연관된 오버레이가 이미 열려있는 경우\r\n            window.location.href = `/HInfo/${hospital.dutyId}`;\r\n          } else {\r\n            if (currentOverlay) {\r\n              currentOverlay.setMap(null); // 이전 오버레이 숨기기\r\n            }\r\n            customOverlay.setMap(map);\r\n            currentOverlay = customOverlay; // 현재 오버레이 업데이트\r\n          }\r\n        });\r\n\r\n        // 지도를 클릭했을 때 커스텀 오버레이를 숨깁니다\r\n        kakao.maps.event.addListener(map, \"click\", function () {\r\n          if (currentOverlay) {\r\n            currentOverlay.setMap(null);\r\n            currentOverlay = null;\r\n          }\r\n        });\r\n      });\r\n    };\r\n    // Todo: 이거 나중에 sample도 빼줘야 됨 -> 실제 리스트로\r\n    displayHospitalsOnMap(sampleHospitals);\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const lat = position.coords.latitude;\r\n          const lng = position.coords.longitude;\r\n          try {\r\n            const response = await fetch(\r\n              `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${lng}&y=${lat}`,\r\n              {\r\n                headers: {\r\n                  Authorization: \"KakaoAK e66ae55f0df11d36b2b954ae39f001eb\",\r\n                  \"Content-Type\":\r\n                    \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                },\r\n              }\r\n            );\r\n            const data = await response.json();\r\n            if (data.documents && data.documents.length > 0) {\r\n              const address = data.documents[0].address;\r\n              setFirstAddress(address.region_1depth_name);\r\n              setSecondAddress(address.region_2depth_name);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error fetching address\", error);\r\n          }\r\n\r\n          const userPosition = new kakao.maps.LatLng(lat, lng);\r\n          const userIconSrc = usericon;\r\n          const userImageSize = new kakao.maps.Size(40, 40);\r\n          const userImageOption = { offset: new kakao.maps.Point(20, 20) };\r\n          const userMarkerImage = new kakao.maps.MarkerImage(\r\n            userIconSrc,\r\n            userImageSize,\r\n            userImageOption\r\n          );\r\n          const userMarker = new kakao.maps.Marker({\r\n            position: userPosition,\r\n            image: userMarkerImage,\r\n          });\r\n          userMarker.setMap(map);\r\n        },\r\n        (error) => {\r\n          console.log(\"Error occurred. Error code: \" + error.code);\r\n        }\r\n      );\r\n    } else {\r\n      console.log(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }, [congestionType]);\r\n\r\n  const handleSort = async (type) => {\r\n    /* Todo: 백 연결하고 이거 주석 처리 풀기\r\n    try {\r\n      const response = await axios.get(BackAPI, {\r\n        params: {\r\n          firstaddress: firstAddress,\r\n          secondaddress: secondAddress,\r\n          isadult: type === \"adult\",\r\n        },\r\n      });\r\n\r\n      if (response.data) {\r\n        displayHospitalsOnMap(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching sorted hospitals\", error);\r\n    }\r\n    */\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"0 20px\" }}>\r\n      <div className=\"mapContainer\">\r\n        <button\r\n          onClick={() => {\r\n            setCongestionType(\"adultpercent\");\r\n            handleSort(\"adult\");\r\n          }}\r\n          className={`button ${\r\n            congestionType === \"adultpercent\"\r\n              ? \"buttonadultpercent\"\r\n              : \"buttonDefault\"\r\n          }`}\r\n        >\r\n          성인 혼잡도\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setCongestionType(\"pediatricpercent\");\r\n            handleSort(\"child\");\r\n          }}\r\n          className={`button ${\r\n            congestionType === \"pediatricpercent\"\r\n              ? \"buttonadultpercent\"\r\n              : \"buttonDefault\"\r\n          }`}\r\n        >\r\n          소아 혼잡도\r\n        </button>\r\n      </div>\r\n      <div className=\"map\" id=\"map\"></div>\r\n      <div className=\"imageContainer\">\r\n        <img src={foursign} alt=\"지도 기준\" className=\"mapImage\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapOrder;\r\n","C:\\ers\\src\\screen\\HInfo.js",["95","96","97","98","99"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../css/HInfo.css\";\r\nimport hospitalbed from \"../components/hospitalbed.png\";\r\nimport reset from \"../components/reset.png\";\r\nimport choose from \"../components/choose.png\";\r\nimport location from \"../components/location.png\";\r\nimport call from \"../components/call.png\";\r\nimport greenHInfo from \"../components/greenHInfo.png\";\r\nimport yellowHInfo from \"../components/yellowHInfo.png\";\r\nimport orangeHInfo from \"../components/orangeHInfo.png\";\r\nimport redHInfo from \"../components/redHInfo.png\";\r\n\r\n\r\n// Todo: 이거 나중에 지워야함\r\nconst Ahospital = {\r\n  error: false,\r\n  data: [\r\n    {\r\n      adultpercent: 80,\r\n      pediatricpercent: 33,\r\n    },\r\n  ],\r\n};\r\n\r\nconst Bhospital = {\r\n  error: false,\r\n  data: [\r\n    {\r\n      eqlist: [\r\n        \"CT\",\r\n        \"MRI\",\r\n        \"인공호흡기\",\r\n        \"인공호흡기조산아\",\r\n        \"혈관촬영기\",\r\n        \"CRRT\",\r\n        \"ECMO\",\r\n        \"중심체온기\",\r\n        \"구급차\",\r\n      ],\r\n      updateTime: \"2023-08-14T23:07:14.825436\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Chospital = {\r\n  error: false,\r\n  data: [\r\n    {\r\n      ersclist: [\r\n        \"심근경색\",\r\n        \"뇌경색\",\r\n        \"뇌출혈[거미막하]\",\r\n        \"뇌출혈[그 외]\",\r\n        \"대동맥 흉부\",\r\n        \"대동맥 복부\",\r\n        \"담낭질환\",\r\n        \"담도포함질환\",\r\n        \"복부응급 비외상\",\r\n        \"위장관 응급내시경 성인\",\r\n        \"위장관 응급내시경 영유아 (1day)\",\r\n        \"기관지 응급내시경 성인\",\r\n        \"산부인과 산과수술\",\r\n        \"산부인과응급 부인과수술\",\r\n        \"응급투석 HD\",\r\n        \"응급투석 CRRT\",\r\n        \"정신과\",\r\n        \"안과적수술\",\r\n        \"영상의학혈관중재 성인\",\r\n        \"영상의학혈관중재 영유아 (1day)\",\r\n      ],\r\n      updateTime: \"2023-08-14T23:07:26.432791\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Dhospital = {\r\n  error: false,\r\n  data: [\r\n    {\r\n      name: \"경상국립대학교병원\",\r\n      address: \"경상남도 진주시 강남로 79 (칠암동)\",\r\n      phoneNumber: \"055-750-8282\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Ehospital = {\r\n  error: false,\r\n  data: [\r\n    {\r\n      emgMessage: \"소아청소년과 당직의사 부재\",\r\n      emgMsgType: \"응급\",\r\n      lasttime: \"2023-08-15T18:00:00\",\r\n    },\r\n    {\r\n      emgMessage: \"비뇨기과 진료불가\",\r\n      emgMsgType: \"응급\",\r\n      lasttime: \"2023-08-15T18:00:00\",\r\n    },\r\n    {\r\n      emgMessage: \"CRRT 부족\",\r\n      emgMsgType: \"응급\",\r\n      lasttime: \"2023-08-15T18:00:00\",\r\n    },\r\n    {\r\n      emgMessage: \"소아과 진료 불가 (당직의사 부재)\",\r\n      emgMsgType: \"응급\",\r\n      lasttime: \"2023-08-16T18:00:00\",\r\n    },\r\n  ],\r\n};\r\n\r\n// Todo: 이거 나중에 기준 바꿔야 됨\r\nconst getCongestionImage = (congestionValue) => {\r\n  if (congestionValue < 50) {\r\n    return greenHInfo;\r\n  } else if (congestionValue < 100) {\r\n    return yellowHInfo;\r\n  } else if (congestionValue < 150) {\r\n    return orangeHInfo;\r\n  } else {\r\n    return redHInfo;\r\n  }\r\n};\r\n\r\nconst HInfo = () => {\r\n  const { dutyId } = useParams();\r\n  // Todo : 나중에 백 연결하고 이거 주석 풀기\r\n  // const [Ahospital, setAHospital] = useState(null); // 혼잡도\r\n  // const [Bhospital, setBHospital] = useState(null); //\r\n  // const [Chospital, setCHospital] = useState(null);\r\n  // const [Dhospital, setDHospital] = useState(null);\r\n  // const [Ehospital, setEHospital] = useState(null);\r\n  // Todo: 백 Api 연결하기\r\n  const BackAPI = \"\";\r\n\r\n  // Todo: 나중에 백 연결하고 이거 주석 풀기 - 1. 혼잡도\r\n  // useEffect(() => {\r\n  //   const fetchHospitalData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`BackAPI/hospital/${dutyID}`);\r\n  //       setAHospital(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Failed to fetch hospital data\", error);\r\n  //     }\r\n  //   };\r\n  //   fetchHospitalData();\r\n  // }, [dutyID]);  // dutyID가 변경될 때마다 백엔드 API 호출\r\n\r\n  // Todo: 나중에 백 연결하고 이거 주석 풀기 - 2. 실시간 가용 장비\r\n  // useEffect(() => {\r\n  //   const fetchHospitalData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`BackAPI/hospital/${dutyID}`);\r\n  //       setBHospital(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Failed to fetch hospital data\", error);\r\n  //     }\r\n  //   };\r\n  //   fetchHospitalData();\r\n  // }, [dutyID]);  // dutyID가 변경될 때마다 백엔드 API 호출\r\n\r\n  // Todo: 나중에 백 연결하고 이거 주석 풀기 - 3. 중증 질환별\r\n  // useEffect(() => {\r\n  //   const fetchHospitalData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`BackAPI/hospital/${dutyID}`);\r\n  //       setCHospital(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Failed to fetch hospital data\", error);\r\n  //     }\r\n  //   };\r\n  //   fetchHospitalData();\r\n  // }, [dutyID]);  // dutyID가 변경될 때마다 백엔드 API 호출\r\n\r\n  // Todo: 나중에 백 연결하고 이거 주석 풀기 - 4. 길찾기 / 전화하기\r\n  // useEffect(() => {\r\n  //   const fetchHospitalData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`BackAPI/hospital/${dutyID}`);\r\n  //       setDHospital(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Failed to fetch hospital data\", error);\r\n  //     }\r\n  //   };\r\n  //   fetchHospitalData();\r\n  // }, [dutyID]);  // dutyID가 변경될 때마다 백엔드 API 호출\r\n\r\n  // Todo: 나중에 백 연결하고 이거 주석 풀기 - 5. 공지사항\r\n  // useEffect(() => {\r\n  //   const fetchHospitalData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(`BackAPI/hospital/${dutyID}`);\r\n  //       setEHospital(response.data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Failed to fetch hospital data\", error);\r\n  //     }\r\n  //   };\r\n  //   fetchHospitalData();\r\n  // }, [dutyID]);  // dutyID가 변경될 때마다 백엔드 API 호출\r\n\r\n  if (!Ahospital || !Bhospital || !Chospital || !Dhospital || !Ehospital) {\r\n    return <div>Error: No hospital information available.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"HInfo-hospital-details-container\">\r\n      <h1 className=\"HInfo-hospital-name\">{Dhospital.data[0].name}</h1>\r\n\r\n      <div className=\"HInfo-hospital-info-section HInfo-emergency-section\">\r\n        <div className=\"HInfo-emergency-header\">\r\n          <div className=\"HInfo-title-container\">\r\n            <h4 className=\"HInfo-emergency-title\">\r\n              현재 응급실 혼잡도(성인 / 소아)\r\n            </h4>\r\n            <span className=\"HInfo-subtitle\">\r\n              현재 환자 수 대비 남은 병실 수 기준입니다.\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-header-right\">\r\n            <img\r\n              src={hospitalbed}\r\n              alt=\"Bed\"\r\n              className=\"HInfo-hospitalbed-icon\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"HInfo-congestion-container\">\r\n          <div className=\"HInfo-emergency-content\">\r\n            <span className=\"HInfo-emergency-label\">성인 진료</span>\r\n            <img\r\n              src={getCongestionImage(Ahospital.data[0].adultpercent)}\r\n              alt=\"Adult Congestion\"\r\n              className=\"HInfo-emergency-icon\"\r\n            />\r\n            <span className=\"HInfo-congestion-text\">\r\n              성인: {Ahospital.data[0].adultpercent}\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-emergency-content\">\r\n            <span className=\"HInfo-emergency-label\">소아 진료</span>\r\n            <img\r\n              src={getCongestionImage(Ahospital.data[0].pediatricpercent)}\r\n              alt=\"Pediatric Congestion\"\r\n              className=\"HInfo-emergency-icon\"\r\n            />\r\n            <span className=\"HInfo-congestion-text\">\r\n              소아: {Ahospital.data[0].pediatricpercent}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"HInfo-hospital-info-section HInfo-procedure-section\">\r\n        <div className=\"HInfo-procedure-header\">\r\n          <div className=\"HInfo-title-container\">\r\n            <h4 className=\"HInfo-procedure-title\">실시간 가용장비 정보</h4>\r\n            <span className=\"HInfo-subtitle\">\r\n              해당 정보는 10분마다 갱신됩니다.\r\n            </span>\r\n            <span className=\"HInfo-update-time\">\r\n              갱신시각: {Bhospital.data[0].updateTime}\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-header-right\">\r\n            <img src={reset} alt=\"Update\" className=\"HInfo-reset-icon\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"HInfo-congestion-container\">\r\n          <div className=\"HInfo-procedure-content\">\r\n            <div className=\"HInfo-procedure-list-container\">\r\n              <ul className=\"HInfo-procedure-list-left\">\r\n                {Bhospital.data[0].eqlist.map((data, index) => (\r\n                  <li key={index} className=\"HInfo-procedure-item\">\r\n                    {data}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"HInfo-hospital-info-section HInfo-procedure-section\">\r\n        <div className=\"HInfo-procedure-header\">\r\n          <div className=\"HInfo-title-container\">\r\n            <h4 className=\"HInfo-procedure-title\">\r\n              중증 질환별 수용 가능 여부\r\n            </h4>\r\n            <span className=\"HInfo-subtitle\">\r\n              해당 정보는 20분마다 갱신됩니다.\r\n            </span>\r\n            <span className=\"HInfo-update-time\">\r\n              갱신시각: {Chospital.data[0].updateTime}\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-header-right\">\r\n            <img src={reset} alt=\"Update\" className=\"HInfo-reset-icon\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"HInfo-congestion-container\">\r\n          <div className=\"HInfo-procedure-content\">\r\n            <div className=\"HInfo-procedure-list-container\">\r\n              <ul className=\"HInfo-procedure-list-left\">\r\n                {Chospital.data[0].ersclist.map((data, index) => (\r\n                  <li key={index} className=\"HInfo-procedure-item\">\r\n                    {data}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"HInfo-hospital-info-section HInfo-procedure-section\">\r\n        <div className=\"HInfo-procedure-header\">\r\n          <div className=\"HInfo-title-container\">\r\n            <h4 className=\"HInfo-procedure-title\">응급실 길찾기 / 전화하기</h4>\r\n            <span className=\"HInfo-subtitle\">\r\n              아이콘을 누르면 곧바로 연결됩니다.\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-header-right\">\r\n            <img src={choose} alt=\"Update\" className=\"HInfo-reset-icon\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"HInfo-congestion-container\">\r\n          <div className=\"HInfo-procedure-content\">\r\n            <div className=\"HInfo-procedure-list-container\">\r\n              <ul className=\"HInfo-procedure-list-left\">\r\n                <li className=\"HInfo-procedure-item\">\r\n                  주소: {Dhospital.data[0].address}\r\n                  <a\r\n                    href={`https://www.google.com/maps/dir/?api=1&destination=${Dhospital.data[0].address}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <img\r\n                      src={location}\r\n                      alt=\"Location Icon\"\r\n                      className=\"HInfo-info-icon\"\r\n                    />\r\n                  </a>\r\n                </li>\r\n                <li className=\"HInfo-procedure-item\">\r\n                  전화번호:{\" \"}\r\n                  <a href={`tel:${Dhospital.data[0].phoneNumber}`}>\r\n                    {Dhospital.data[0].phoneNumber}\r\n                  </a>\r\n                  <a href={`tel:${Dhospital.data[0].phoneNumber}`}>\r\n                    <img\r\n                      src={call}\r\n                      alt=\"Call Icon\"\r\n                      className=\"HInfo-info-icon\"\r\n                    />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"HInfo-hospital-info-section HInfo-procedure-section\">\r\n        <div className=\"HInfo-procedure-header\">\r\n          <div className=\"HInfo-title-container\">\r\n            <h4 className=\"HInfo-procedure-title\">공지사항</h4>\r\n            <span className=\"HInfo-subtitle\">\r\n              해당 정보는 60분마다 갱신됩니다.\r\n            </span>\r\n            <span className=\"HInfo-update-time\">\r\n              갱신시각: {Ehospital.data[Ehospital.data.length - 1].lasttime}\r\n            </span>\r\n          </div>\r\n          <div className=\"HInfo-header-right\">\r\n            <img src={reset} alt=\"Update\" className=\"HInfo-reset-icon\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"HInfo-congestion-container\">\r\n          <div className=\"HInfo-procedure-content\">\r\n            <div className=\"HInfo-procedure-list-container\">\r\n              <ul className=\"HInfo-procedure-list-left\">\r\n                {Ehospital.data.map((item, index) => (\r\n                  <li key={index} className=\"HInfo-procedure-item\">\r\n                    {item.emgMessage}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HInfo;","C:\\ers\\src\\screen\\LoginCallbackPage.js",["100","101","102","103","104","105","106","107"],[],"import React, {useContext, useEffect, useState} from 'react';\nimport {parseJwt} from \"../utils/JwtUtils\";\nimport {useCookies} from \"react-cookie\";\nimport AuthContext from \"./AuthContext\";\n\nconst LoginCallBackPage = () => {\n\n    const Auth = useContext(AuthContext);\n\n    const [cookie, setCookie] = useCookies(['refreshToken']);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n\n    let accessToken, refreshToken;\n    useEffect(() => {\n        const isLoggedIn = Auth.userIsAuthenticated();\n        setIsLoggedIn(isLoggedIn);\n\n        accessToken = new URL(window.location.href).searchParams.get(\"accessToken\")\n        refreshToken = new URL(window.location.href).searchParams.get(\"refreshToken\")\n\n        const data = parseJwt(accessToken);\n\n        // local storage 에 data, access token 저장\n        const user = { data, accessToken };\n\n        setCookie('refreshToken', refreshToken, {path: '/'});\n\n        Auth.userLogin(user);\n\n        setIsLoggedIn(true);\n\n        console.log(data)\n\n        // window.location.href = \"/\";\n    }, []);\n\n    return (\n        <div>\n            Login Callback Page...\n\n        </div>\n    );\n};\n\nexport default LoginCallBackPage;\n","C:\\ers\\src\\screen\\AuthContext.js",[],[],"C:\\ers\\src\\utils\\JwtUtils.js",[],[],{"ruleId":"108","severity":1,"message":"109","line":13,"column":9,"nodeType":"110","messageId":"111","endLine":13,"endColumn":21},{"ruleId":"108","severity":1,"message":"112","line":14,"column":9,"nodeType":"110","messageId":"111","endLine":14,"endColumn":21},{"ruleId":"108","severity":1,"message":"113","line":15,"column":9,"nodeType":"110","messageId":"111","endLine":15,"endColumn":18},{"ruleId":"108","severity":1,"message":"114","line":16,"column":9,"nodeType":"110","messageId":"111","endLine":16,"endColumn":18},{"ruleId":"108","severity":1,"message":"115","line":17,"column":9,"nodeType":"110","messageId":"111","endLine":17,"endColumn":19},{"ruleId":"108","severity":1,"message":"116","line":46,"column":9,"nodeType":"110","messageId":"111","endLine":46,"endColumn":20},{"ruleId":"108","severity":1,"message":"117","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":21},{"ruleId":"108","severity":1,"message":"118","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":13},{"ruleId":"108","severity":1,"message":"119","line":109,"column":10,"nodeType":"110","messageId":"111","endLine":109,"endColumn":18},{"ruleId":"108","severity":1,"message":"120","line":110,"column":10,"nodeType":"110","messageId":"111","endLine":110,"endColumn":19},{"ruleId":"108","severity":1,"message":"121","line":113,"column":9,"nodeType":"110","messageId":"111","endLine":113,"endColumn":16},{"ruleId":"108","severity":1,"message":"118","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":13},{"ruleId":"108","severity":1,"message":"122","line":97,"column":10,"nodeType":"110","messageId":"111","endLine":97,"endColumn":22},{"ruleId":"108","severity":1,"message":"123","line":98,"column":10,"nodeType":"110","messageId":"111","endLine":98,"endColumn":23},{"ruleId":"108","severity":1,"message":"121","line":101,"column":9,"nodeType":"110","messageId":"111","endLine":101,"endColumn":16},{"ruleId":"108","severity":1,"message":"118","line":11,"column":8,"nodeType":"110","messageId":"111","endLine":11,"endColumn":13},{"ruleId":"108","severity":1,"message":"122","line":226,"column":10,"nodeType":"110","messageId":"111","endLine":226,"endColumn":22},{"ruleId":"108","severity":1,"message":"123","line":227,"column":10,"nodeType":"110","messageId":"111","endLine":227,"endColumn":23},{"ruleId":"108","severity":1,"message":"124","line":228,"column":9,"nodeType":"110","messageId":"111","endLine":228,"endColumn":17},{"ruleId":"108","severity":1,"message":"121","line":231,"column":9,"nodeType":"110","messageId":"111","endLine":231,"endColumn":16},{"ruleId":"108","severity":1,"message":"125","line":245,"column":13,"nodeType":"110","messageId":"111","endLine":245,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":301,"column":30,"nodeType":"110","endLine":301,"endColumn":43},{"ruleId":"108","severity":1,"message":"128","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"129","line":1,"column":28,"nodeType":"110","messageId":"111","endLine":1,"endColumn":36},{"ruleId":"108","severity":1,"message":"118","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":13},{"ruleId":"108","severity":1,"message":"130","line":129,"column":11,"nodeType":"110","messageId":"111","endLine":129,"endColumn":17},{"ruleId":"108","severity":1,"message":"121","line":137,"column":9,"nodeType":"110","messageId":"111","endLine":137,"endColumn":16},{"ruleId":"108","severity":1,"message":"131","line":10,"column":12,"nodeType":"110","messageId":"111","endLine":10,"endColumn":18},{"ruleId":"108","severity":1,"message":"132","line":11,"column":12,"nodeType":"110","messageId":"111","endLine":11,"endColumn":20},{"ruleId":"108","severity":1,"message":"133","line":11,"column":22,"nodeType":"110","messageId":"111","endLine":11,"endColumn":33},{"ruleId":"108","severity":1,"message":"134","line":12,"column":12,"nodeType":"110","messageId":"111","endLine":12,"endColumn":20},{"ruleId":"108","severity":1,"message":"135","line":12,"column":22,"nodeType":"110","messageId":"111","endLine":12,"endColumn":33},{"ruleId":"108","severity":1,"message":"136","line":13,"column":12,"nodeType":"110","messageId":"111","endLine":13,"endColumn":22},{"ruleId":"126","severity":1,"message":"137","line":21,"column":23,"nodeType":"138","endLine":21,"endColumn":84},{"ruleId":"126","severity":1,"message":"139","line":22,"column":24,"nodeType":"138","endLine":22,"endColumn":86},"no-unused-vars","'REST_API_KEY' is assigned a value but never used.","Identifier","unusedVar","'REDIRECT_URI' is assigned a value but never used.","'Kakaolink' is assigned a value but never used.","'Naverlink' is assigned a value but never used.","'Googlelink' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","'useLocation' is defined but never used.","'axios' is defined but never used.","'Latitude' is assigned a value but never used.","'Longitude' is assigned a value but never used.","'BackAPI' is assigned a value but never used.","'firstAddress' is assigned a value but never used.","'secondAddress' is assigned a value but never used.","'Navigate' is assigned a value but never used.","'size' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'currentOverlay' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'useEffect' is defined but never used.","'useState' is defined but never used.","'dutyId' is assigned a value but never used.","'cookie' is assigned a value but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","Assignments to the 'accessToken' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'refreshToken' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect."]